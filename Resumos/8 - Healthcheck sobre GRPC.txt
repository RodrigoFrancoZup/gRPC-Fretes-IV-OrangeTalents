 Healthcheck sobre GRPC:

Vamos agora habilitar o monitoramento de saúde de uma API gRPC igual fizemos no capítulo anterior, só que antes foi em cima do HTTP, ou seja, faziamos uma requsição em http, agora vamos fazer esse mesmo monitoramento via gRPC. 

Lembre-se que com um gerenciamento de saúde vamos poder saber se está tudo certo com a aplicação ou se a mesma está travando ou se caiu. Esse monitoramento ainda auxilia o balanceador de carga e o Kubernet a tomarem ações como tirar a API do ar, reiniciar, ou criar outra instância...

Siga o passo a passo:

1) Para criamos um endpoint via gRPC temos que criar um Service no arquivo .proto e a Google visando padronizar a maneira de se criar esse serviço já nos disponibiliza um feito, já nos disponibiliza um arquivo .proto. Vamos colocar esse aquivo .proto em nosso projeto. Esse arquivo está em:
https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto
Eu peguei o conteudo desse arquivo, copiei e colei no arquivo health.proto que eu criei.
Conteudo do arquivo .proto da Google:
// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The canonical version of this proto can be found at
// https://github.com/grpc/grpc-proto/blob/master/grpc/health/v1/health.proto

syntax = "proto3";

package grpc.health.v1;

option csharp_namespace = "Grpc.Health.V1";
option go_package = "google.golang.org/grpc/health/grpc_health_v1";
option java_multiple_files = true;
option java_outer_classname = "HealthProto";
option java_package = "io.grpc.health.v1";

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;  // Used only by the Watch method.
  }
  ServingStatus status = 1;
}

service Health {
  // If the requested service is unknown, the call will fail with status
  // NOT_FOUND.
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);

  // Performs a watch for the serving status of the requested service.
  // The server will immediately send back a message indicating the current
  // serving status.  It will then subsequently send a new message whenever
  // the service's serving status changes.
  //
  // If the requested service is unknown when the call is received, the
  // server will send a message setting the serving status to
  // SERVICE_UNKNOWN but will *not* terminate the call.  If at some
  // future point, the serving status of the service becomes known, the
  // server will send a new message with the service's serving status.
  //
  // If the call terminates with status UNIMPLEMENTED, then clients
  // should assume this method is not supported and should not retry the
  // call.  If the call terminates with any other status (including OK),
  // clients should retry the call with appropriate exponential backoff.
  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}

2) Agora temos que rodar a task do Gradle: Gradle Celan CompileJava, pois assim vamos gerar os Stubs do arquivo health.proto;

3) Agora vamos criar uma classe para implementar o serviço declarado no healh.proto. Vamos chamar essa classe de HealthCheckerService. Ela ficará assim:

@Singleton
class HealthCheckerService : HealthGrpc.HealthImplBase() {
}

4) Agora na classe HealthCheckerService  vamos sobrescrever os métodos do serviço declarado em Health.proto. Ficará assim:

@Singleton
class HealthCheckerService : HealthGrpc.HealthImplBase() {

    override fun check(request: HealthCheckRequest?, responseObserver: StreamObserver<HealthCheckResponse>?) {
        responseObserver?.onNext(HealthCheckResponse.newBuilder()
                .setStatus(HealthCheckResponse.ServingStatus.SERVING)
                .build()
        )
        responseObserver?.onCompleted()
    }

    override fun watch(request: HealthCheckRequest?, responseObserver: StreamObserver<HealthCheckResponse>?) {
        responseObserver?.onNext(HealthCheckResponse.newBuilder()
            .setStatus(HealthCheckResponse.ServingStatus.SERVING)
            .build()
        )
    }
}

5) Agora já podemos testar, basta ir na ferramenta BloomRPC, adicionar o proto health.proto e fazer a requisição.

Obs: Veja que temos dois métodos muito parecidos no arquivo .proto da google, um chamado de check e outro watch. Qual a diferença deles?
Resposta: Ambos são responsáveis por responder os detalhes de saúde da aplicação, só que o check foi feito com o objetivo que outra aplicação fique requisitando "pingando" para obter a resposta, já o watch utiliza Stream (veja lá no arquivo .proto), e ao utilizar o Stream ele deixa o canal aberto para ele responder a outras aplicações (interessados nesta informação) o seu detalhe de saúde.


